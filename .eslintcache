[{"/home/noel/git/dirico/src/index.tsx":"1","/home/noel/git/dirico/src/reportWebVitals.ts":"2","/home/noel/git/dirico/src/App.tsx":"3","/home/noel/git/dirico/src/components/Column/Column.tsx":"4","/home/noel/git/dirico/src/components/Header/Header.tsx":"5","/home/noel/git/dirico/src/services/KanbanState.service.ts":"6","/home/noel/git/dirico/src/components/Card/Card.tsx":"7","/home/noel/git/dirico/src/components/Overview/Overview.tsx":"8","/home/noel/git/dirico/src/Helper.tsx":"9"},{"size":501,"mtime":1608026009746,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":1608025076663,"results":"12","hashOfConfig":"11"},{"size":3890,"mtime":1608420394274,"results":"13","hashOfConfig":"11"},{"size":3891,"mtime":1608420079057,"results":"14","hashOfConfig":"11"},{"size":1078,"mtime":1608261693536,"results":"15","hashOfConfig":"11"},{"size":4293,"mtime":1608420355717,"results":"16","hashOfConfig":"11"},{"size":6585,"mtime":1608407548516,"results":"17","hashOfConfig":"11"},{"size":675,"mtime":1608420476869,"results":"18","hashOfConfig":"11"},{"size":1290,"mtime":1608405512372,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1nhrloj",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"22"},"/home/noel/git/dirico/src/index.tsx",[],["42","43"],"/home/noel/git/dirico/src/reportWebVitals.ts",[],"/home/noel/git/dirico/src/App.tsx",["44"],"/home/noel/git/dirico/src/components/Column/Column.tsx",["45","46","47"],"/home/noel/git/dirico/src/components/Header/Header.tsx",["48"],"import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MoreVert from '@material-ui/icons/MoreVert';\nimport styles from './Header.module.scss';\nimport { Menu, MenuItem } from '@material-ui/core';\nimport * as KSS from '../../services/KanbanState.service';\n\nconst ks = KSS.default._();\n\nconst Header: React.FC = () => {\n  const [menu, setMenu] = React.useState(false);\n  const [menuAnchorEl, setMenuAnchorEl] = React.useState();\n  return (\n  <>\n    <Menu\n      open={menu}\n      onClose={() => setMenu(false)}\n      anchorEl={menuAnchorEl}\n    >\n      <MenuItem onClick={() => {setMenu(false); ks.createNewColumn()}}>Add</MenuItem>\n    </Menu>\n    <AppBar position='static'>\n      <Toolbar>\n        <IconButton aria-label='display more actions' edge='end' color='inherit' onClick={(ev: any) => {setMenuAnchorEl(ev.target); setMenu(true);}}>\n          <MoreVert />\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n  </>\n)};\n\nexport default Header;\n","/home/noel/git/dirico/src/services/KanbanState.service.ts",["49"],"/home/noel/git/dirico/src/components/Card/Card.tsx",["50","51","52","53","54","55","56","57","58"],"import React from 'react';\nimport styles from './Card.module.scss';\nimport MoreVert from '@material-ui/icons/MoreVert';\nimport MUICard from '@material-ui/core/Card';\nimport * as KSS from '../../services/KanbanState.service';\nimport { BetterBehaviorSubject, OnBehaviorSubjectHook } from '../../Helper';\nimport { TextField, CardHeader, CardMedia, CardContent, IconButton, Typography, Button, Menu, MenuItem, FormControlLabel, Checkbox } from '@material-ui/core';\nimport { DropzoneDialogBase } from 'material-ui-dropzone';\nimport { Field } from '../../services/KanbanState.service';\nimport { DragSource, useDrag } from 'react-dnd';\n\nconst ks = KSS.default._();\n\nconst Card: React.FC<{ card: KSS.Card }> = ({card}) => {\n  const [dropzoneDialogVisibility, setDropzoneDialogVisibility] = React.useState(false);\n  const [menu, setMenu] = React.useState(false);\n  const [menuAnchorEl, setMenuAnchorEl] = React.useState();\n\n  const [title, setTitle] = OnBehaviorSubjectHook<{field: KSS.Field; value: any;}[]>(ks.cards, () => ks.getFieldsByType(card, KSS.FieldTypes.title));\n  const [subheader, setSubheader] = OnBehaviorSubjectHook<{field: KSS.Field; value: any;}[]>(ks.cards, () => ks.getFieldsByType(card, KSS.FieldTypes.subheader));\n  const [image, setImage] = OnBehaviorSubjectHook<{field: KSS.Field; value: any;}[]>(ks.cards, () => ks.getFieldsByType(card, KSS.FieldTypes.image))\n  const [paragraphs, setParagraphs] = OnBehaviorSubjectHook<Array<any>>(ks.cards, () => ks.getFieldsByType(card, KSS.FieldTypes.paragraph));\n  const [fields, setFields] = OnBehaviorSubjectHook<{ field: KSS.Field; value: any; }[]>(ks.fields, () => card.fields);\n\n  const checkVisibility = (field: { field: Field; value: any; }) => field.field.state === KSS.FieldStates.visible;\n\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: 'card', card: card },\n    collect: (monitor) => ({\n      isDragging: !!monitor.isDragging(),\n      card\n    })\n  });\n\n  return (\n    <div className={styles.Card} ref={drag}>\n      <Menu\n        open={menu}\n        onClose={() => setMenu(false)}\n        anchorEl={menuAnchorEl}\n      >\n        <MenuItem onClick={() => {setMenu(false); ks.setCardDisplayStateByCard(card, KSS.CardStates.edit)}}>Edit</MenuItem>\n        <MenuItem onClick={() => {setMenu(false); ks.removeCardByCard(card)}}>Remove</MenuItem>\n        <MenuItem onClick={() => {setMenu(false); ks.setCardDisplayStateByCard(card, KSS.CardStates.hide)}}>Hide fields</MenuItem>\n      </Menu>\n      {card.state === KSS.CardStates.hide && <MUICard>\n       <CardHeader\n          className={styles.CardHeader}\n          title='Hide fields'\n        />\n        <CardContent>\n          {fields.map(field => {\n            return <><FormControlLabel\n              control={<Checkbox checked={field.field.state === KSS.FieldStates.hidden}\n              onChange={() => {ks.setFieldStateByField(field.field, field.field.state === KSS.FieldStates.hidden ? KSS.FieldStates.visible : KSS.FieldStates.hidden)}} />} label={field.field.name} /><br/></>;\n          })}\n          <Button onClick={() => {ks.setCardDisplayStateByCard(card, KSS.CardStates.data)}} variant='contained' color='primary' fullWidth={true}>Save</Button>\n        </CardContent>\n      </MUICard>}\n      {card.state === KSS.CardStates.edit && <MUICard>\n        <CardHeader\n          className={styles.CardHeader}\n          action={\n            <IconButton aria-label='settings'>\n              <MoreVert />\n            </IconButton>\n          }\n          onClick={(ev: any) => {setMenu(true); console.log(ev); setMenuAnchorEl(ev.target)}}\n          title='Edit'\n        />\n        <CardContent>\n          {checkVisibility(title[0]) && <TextField\n            label='Title'\n            defaultValue={title[0].value}\n            fullWidth={true}\n            margin={'normal'}\n            onChange={(ev) => ks.replaceFieldByType(card, KSS.FieldTypes.title, ev.target.value)}\n          />}\n          {checkVisibility(subheader[0]) && <TextField\n            label='Publish date'\n            defaultValue={subheader[0].value}\n            type='datetime-local'\n            fullWidth={true}\n            margin='normal'\n            onChange={(ev) => ks.replaceFieldByType(card, KSS.FieldTypes.subheader, ev.target.value)}\n          />}\n          {checkVisibility(image[0]) && <div className={styles.FormImage}>\n            <img src={image[0].value} onClick={() => setDropzoneDialogVisibility(true)} />\n          </div>}\n          <DropzoneDialogBase\n            dialogProps={{} as any}\n            fileObjects={{} as any}\n            acceptedFiles={['image/*']}\n            filesLimit={1}\n            onAdd={(files: any) => {ks.replaceFieldByType(card, KSS.FieldTypes.image, files[0].data); setDropzoneDialogVisibility(false);}}\n            open={dropzoneDialogVisibility}\n            onClose={() => setDropzoneDialogVisibility(false)}\n          />\n          {paragraphs.map((paragraphField, index) => {\n            return <>{checkVisibility(paragraphField) && <TextField\n              label='Description'\n              multiline\n              rows={4}\n              defaultValue={paragraphField.value}\n              fullWidth={true}\n              margin='normal'\n              onChange={(ev) => ks.replaceFieldByType(card, KSS.FieldTypes.paragraph, ev.target.value, index)}\n            />}</>\n          })}\n          <Button onClick={() => {ks.setCardDisplayStateByCard(card, KSS.CardStates.data)}} variant='contained' color='primary' fullWidth={true}>Save</Button>\n        </CardContent>\n      </MUICard>}\n      {card.state === KSS.CardStates.data && <MUICard>\n        <CardHeader\n          className={styles.CardHeader}\n          action={\n            <IconButton aria-label='settings'>\n              <MoreVert />\n            </IconButton>\n          }\n          onClick={(ev: any) => {setMenu(true); setMenuAnchorEl(ev.target)}}\n          title={checkVisibility(title[0]) ? title[0].value : ''}\n          subheader={checkVisibility(subheader[0]) ? subheader[0].value : ''}\n          titleTypographyProps={{variant:'body2' }}\n          subheaderTypographyProps={{variant:'body2' }}\n        />\n        {checkVisibility(image[0]) && <CardMedia\n          className={styles.CardHeaderImage}\n          image={image[0].value}\n        />}\n        <CardContent>\n          {paragraphs.map(paragraphField => {\n            return <>{checkVisibility(paragraphField) && <Typography variant='body2' color='textSecondary' component='p'>{paragraphField.value}</Typography>}</>;\n          })}\n          \n        </CardContent>\n      </MUICard>}\n    </div>\n  );\n\n}\n\nexport default Card;\n","/home/noel/git/dirico/src/components/Overview/Overview.tsx",["59"],"/home/noel/git/dirico/src/Helper.tsx",["60","61"],"import { useEffect, useState } from \"react\";\nimport { BehaviorSubject } from \"rxjs\";\n\nconst BehaviorSubjectToHook: <T>(behaviorSubject: BehaviorSubject<any>) => [T, React.Dispatch<React.SetStateAction<T>>] = (behaviorSubject: BehaviorSubject<any>) => {\n    const [subject, setSubject] = useState(behaviorSubject.getValue());\n    \n    useEffect(() => {\n        behaviorSubject.subscribe(val => {\n            setSubject(val);\n        });\n    }, []);\n    return [subject, setSubject];\n};\n\nconst OnBehaviorSubjectHook: <T>(behaviorSubject: BehaviorSubject<any>, valReq: () => any) => [T,  React.Dispatch<React.SetStateAction<T>>] =  (behaviorSubject: BehaviorSubject<any>, valReq: () => any) => {\n    const [subject, setSubject] = useState(valReq());\n\n    useEffect(() => {\n        behaviorSubject.subscribe(() => {\n            console.log('subscribe trigger', behaviorSubject, valReq());\n            setSubject(valReq());\n        });\n    }, []);\n    return [subject, setSubject];\n};\n\nclass BetterBehaviorSubject<T> extends BehaviorSubject<T> {\n    trigger() {\n        const value = this.getValue();\n        if (value instanceof Array) {\n            this.next([...(value as any)] as any);\n        }        \n    }\n}\n\nexport {BehaviorSubjectToHook, OnBehaviorSubjectHook, BetterBehaviorSubject};\n",{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":5,"column":10,"nodeType":"68","messageId":"69","endLine":5,"endColumn":22},{"ruleId":"66","severity":1,"message":"70","line":20,"column":17,"nodeType":"68","messageId":"69","endLine":20,"endColumn":25},{"ruleId":"66","severity":1,"message":"71","line":21,"column":19,"nodeType":"68","messageId":"69","endLine":21,"endColumn":28},{"ruleId":"66","severity":1,"message":"72","line":23,"column":12,"nodeType":"68","messageId":"69","endLine":23,"endColumn":18},{"ruleId":"66","severity":1,"message":"73","line":6,"column":8,"nodeType":"68","messageId":"69","endLine":6,"endColumn":14},{"ruleId":"74","severity":1,"message":"75","line":98,"column":34,"nodeType":"76","messageId":"77","endLine":98,"endColumn":36},{"ruleId":"66","severity":1,"message":"78","line":6,"column":10,"nodeType":"68","messageId":"69","endLine":6,"endColumn":31},{"ruleId":"66","severity":1,"message":"79","line":10,"column":10,"nodeType":"68","messageId":"69","endLine":10,"endColumn":20},{"ruleId":"66","severity":1,"message":"80","line":19,"column":17,"nodeType":"68","messageId":"69","endLine":19,"endColumn":25},{"ruleId":"66","severity":1,"message":"81","line":20,"column":21,"nodeType":"68","messageId":"69","endLine":20,"endColumn":33},{"ruleId":"66","severity":1,"message":"82","line":21,"column":17,"nodeType":"68","messageId":"69","endLine":21,"endColumn":25},{"ruleId":"66","severity":1,"message":"83","line":22,"column":22,"nodeType":"68","messageId":"69","endLine":22,"endColumn":35},{"ruleId":"66","severity":1,"message":"84","line":23,"column":18,"nodeType":"68","messageId":"69","endLine":23,"endColumn":27},{"ruleId":"66","severity":1,"message":"85","line":27,"column":12,"nodeType":"68","messageId":"69","endLine":27,"endColumn":22},{"ruleId":"86","severity":1,"message":"87","line":88,"column":13,"nodeType":"88","endLine":88,"endColumn":91},{"ruleId":"66","severity":1,"message":"89","line":10,"column":19,"nodeType":"68","messageId":"69","endLine":10,"endColumn":29},{"ruleId":"90","severity":1,"message":"91","line":11,"column":8,"nodeType":"92","endLine":11,"endColumn":10,"suggestions":"93"},{"ruleId":"90","severity":1,"message":"94","line":23,"column":8,"nodeType":"92","endLine":23,"endColumn":10,"suggestions":"95"},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"@typescript-eslint/no-unused-vars","'ColumnStates' is defined but never used.","Identifier","unusedVar","'setCards' is assigned a value but never used.","'setColumn' is assigned a value but never used.","'isOver' is assigned a value but never used.","'styles' is defined but never used.","array-callback-return","Array.prototype.filter() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'BetterBehaviorSubject' is defined but never used.","'DragSource' is defined but never used.","'setTitle' is assigned a value but never used.","'setSubheader' is assigned a value but never used.","'setImage' is assigned a value but never used.","'setParagraphs' is assigned a value but never used.","'setFields' is assigned a value but never used.","'isDragging' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setColumns' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'behaviorSubject'. Either include it or remove the dependency array.","ArrayExpression",["98"],"React Hook useEffect has missing dependencies: 'behaviorSubject' and 'valReq'. Either include them or remove the dependency array. If 'valReq' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["99"],"no-global-assign","no-unsafe-negation",{"desc":"100","fix":"101"},{"desc":"102","fix":"103"},"Update the dependencies array to be: [behaviorSubject]",{"range":"104","text":"105"},"Update the dependencies array to be: [behaviorSubject, valReq]",{"range":"106","text":"107"},[443,445],"[behaviorSubject]",[938,940],"[behaviorSubject, valReq]"]