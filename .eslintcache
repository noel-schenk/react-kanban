[{"/home/noel/git/dirico/src/index.tsx":"1","/home/noel/git/dirico/src/reportWebVitals.ts":"2","/home/noel/git/dirico/src/App.tsx":"3","/home/noel/git/dirico/src/components/Column/Column.tsx":"4","/home/noel/git/dirico/src/components/Header/Header.tsx":"5","/home/noel/git/dirico/src/services/KanbanState.service.ts":"6","/home/noel/git/dirico/src/components/Card/Card.tsx":"7","/home/noel/git/dirico/src/components/Overview/Overview.tsx":"8","/home/noel/git/dirico/src/Helper.tsx":"9","/home/noel/git/dirico/src/components/Card/Card.stories.tsx":"10","/home/noel/git/dirico/src/components/Column/Column.stories.tsx":"11","/home/noel/git/dirico/src/components/Header/Header.stories.tsx":"12","/home/noel/git/dirico/src/components/Overview/Overview.stories.tsx":"13"},{"size":501,"mtime":1608026009746,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":1608025076663,"results":"16","hashOfConfig":"15"},{"size":3890,"mtime":1608474776101,"results":"17","hashOfConfig":"15"},{"size":3965,"mtime":1608477230428,"results":"18","hashOfConfig":"15"},{"size":1111,"mtime":1608477124411,"results":"19","hashOfConfig":"15"},{"size":5024,"mtime":1608481519744,"results":"20","hashOfConfig":"15"},{"size":6663,"mtime":1608480612622,"results":"21","hashOfConfig":"15"},{"size":1147,"mtime":1608481556556,"results":"22","hashOfConfig":"15"},{"size":1217,"mtime":1608480603418,"results":"23","hashOfConfig":"15"},{"size":348,"mtime":1608475606153,"results":"24","hashOfConfig":"15"},{"size":596,"mtime":1608479139212,"results":"25","hashOfConfig":"15"},{"size":183,"mtime":1608475614898,"results":"26","hashOfConfig":"15"},{"size":193,"mtime":1608475611429,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1nhrloj",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"/home/noel/git/dirico/src/index.tsx",[],["62","63"],"/home/noel/git/dirico/src/reportWebVitals.ts",[],"/home/noel/git/dirico/src/App.tsx",["64"],"import React from 'react';\nimport './App.scss';\nimport Overview from './components/Overview/Overview';\nimport Header from './components/Header/Header';\nimport { ColumnStates, FieldStates, FieldTypes } from './services/KanbanState.service';\nimport 'fontsource-roboto';\nimport * as KSS from './services/KanbanState.service';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { v4 as uuid } from 'uuid';\n\nconst ks = KSS.default._();\n\n// DEMO DATA REMOVE FOR PRODUCTION\nks.fields.next([\n  {key: uuid(), type: FieldTypes.title, name: 'title', state: FieldStates.visible},\n  {key: uuid(), type: FieldTypes.subheader, name: 'publish-date', state: FieldStates.visible},\n  {key: uuid(), type: FieldTypes.image, name: 'attachment', state: FieldStates.visible},\n  {key: uuid(), type: FieldTypes.paragraph, name: 'description', state: FieldStates.visible}\n]);\n/*\n  ks.columns.next([\n    {position: 0, title: 'Open', color: '#ffc3df', state: ColumnStates.data},\n    {position: 1, title: 'In Progress', color: '#c3d3ff', state: ColumnStates.data},\n    {position: 2, title: 'Published', color: '#ffe7c3', state: ColumnStates.data}\n  ]);\n  ks.fields.next([\n    {type: FieldTypes.title, name: 'title', state: FieldStates.visible},\n    {type: FieldTypes.subheader, name: 'publish-date', state: FieldStates.visible},\n    {type: FieldTypes.image, name: 'attachment', state: FieldStates.visible},\n    {type: FieldTypes.paragraph, name: 'description', state: FieldStates.visible}\n  ]);\n\n  const defaultFieldsInit = [\n    {field: ks.fields.getValue()[0], value: 'Example Title'},\n    {field: ks.fields.getValue()[1], value: '2020-12-12T20:30'},\n    {field: ks.fields.getValue()[2], value: 'https://placekitten.com/300/200'},\n    {field: ks.fields.getValue()[3], value: 'paragraph'}\n  ];\n\n  const cardsInit = [\n    {\n      column: ks.columns.getValue()[0],\n      fields: defaultFieldsInit.slice(),\n      states: {\n        'display': KSS.DisplayStates.data\n      }\n    },\n    {\n      column: ks.columns.getValue()[0],\n      fields: defaultFieldsInit.slice(),\n      states: {\n        'display': KSS.DisplayStates.data\n      }\n    },\n    {\n      column: ks.columns.getValue()[1],\n      fields: defaultFieldsInit.slice(),\n      states: {\n        'display': KSS.DisplayStates.data\n      }\n    }\n  ];\n\n  ks.cards.next(cardsInit);\n\n  setTimeout(() => {\n    const testFields = [{field: ks.fields.getValue()[0], value: 'Test Title'},\n    {field: ks.fields.getValue()[1], value: '2020-12-12T20:30'},\n    {field: ks.fields.getValue()[2], value: 'https://placekitten.com/300/200'},\n    {field: ks.fields.getValue()[3], value: 'paragraph'}];\n    cardsInit[0].column = ks.columns.getValue()[2];\n    cardsInit[0].fields = testFields;\n    cardsInit.push({\n      column: ks.columns.getValue()[2],\n      fields: defaultFieldsInit.slice(),\n      states: {\n        'display': KSS.DisplayStates.edit\n      }\n    });\n    ks.cards.next(cardsInit);\n    ks.columns.next([\n      {position: 0, title: 'Start', color: '#ffc3df', state: ColumnStates.data},\n      {position: 1, title: 'In Progress', color: '#c3d3ff', state: ColumnStates.data},\n      {position: 2, title: 'Published', color: '#ffe7c3', state: ColumnStates.data}\n    ]);\n    setTimeout(() => {\n      ks.columns.next([\n        {position: 0, title: 'Start', color: '#ffc3df', state: ColumnStates.data},\n        {position: 1, title: 'In Progress', color: '#c3d3ff', state: ColumnStates.data},\n        {position: 2, title: 'Published', color: '#ffe7c3', state: ColumnStates.data},\n        {position: 3, title: 'Whaaat', color: '#ffe7c3', state: ColumnStates.data} // why is it adding here but not in the service itself?\n      ]);\n    }, 1000);\n  }, 1000);\n*/\n// END DEMO DATA\n\n\nfunction App() {\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <Header/>\n      <Overview/>\n    </DndProvider>\n  );\n}\n\nexport default App;\n","/home/noel/git/dirico/src/components/Column/Column.tsx",["65","66","67"],"import React from 'react';\nimport styles from './Column.module.scss';\nimport Paper from '@material-ui/core/Paper';\nimport Card from '../Card/Card';\nimport * as KSS from '../../services/KanbanState.service';\nimport { OnBehaviorSubjectHook } from '../../Helper';\nimport { Button, CardContent, IconButton, Menu, MenuItem, Dialog, TextField, DialogContent, DialogContentText, DialogActions, DialogTitle } from '@material-ui/core';\nimport { BlockPicker } from 'react-color';\nimport { MoreVert } from '@material-ui/icons';\nimport MUICard from '@material-ui/core/Card';\nimport { useDrop } from 'react-dnd';\n\nconst ks = KSS.default._();\n\n/**\n * Adding and displaying cards\n * Editing and removing the column\n */\nconst Column: React.FC<{ column: KSS.Column }> = ({column}) => {\n  const [menu, setMenu] = React.useState(false);\n  const [menuAnchorEl, setMenuAnchorEl] = React.useState();\n  const [modal, setModal] = React.useState(false);\n  \n  const [cards, setCards] = OnBehaviorSubjectHook<Array<KSS.Card>>(ks.cards, () => ks.getCardsByColumn(column));\n  const [rColumn, setColumn] = OnBehaviorSubjectHook<KSS.Column>(ks.columns, () => column);\n\n  const [{ isOver }, drop] = useDrop({\n    accept: 'card',\n    drop: (dowt) => {\n      const card = ((dowt as any).card as KSS.Card);\n      ks.moveCardToColumn(card, column);\n    },\n    collect: (monitor) => ({\n      isOver: !!monitor.isOver()\n    })\n  });\n\n  return (\n  <>\n  <Dialog\n    open={modal}\n    onClose={() => setModal(false)}\n    aria-labelledby='simple-modal-title'\n    aria-describedby='simple-modal-description'\n  >\n    <DialogTitle>Removes cards?</DialogTitle>\n    <DialogContent>\n      <DialogContentText>Do you want to remove this Column and all Cards inside it?</DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button variant='contained' color='secondary' onClick={() => {setModal(false); ks.removeColumn(column);}}>Yes</Button>\n      <Button variant='contained' color='primary' onClick={() => {setModal(false);}}>No</Button>\n    </DialogActions>\n  </Dialog>\n  <Menu\n    open={menu}\n    onClose={() => setMenu(false)}\n    anchorEl={menuAnchorEl}\n  >\n    <MenuItem onClick={() => {setMenu(false); ks.setColumnStateByColumn(column, KSS.ColumnStates.edit)}}>Edit column</MenuItem>\n    <MenuItem onClick={() => {\n      setMenu(false);\n      if (ks.getCardsByColumn(column).length >  0) {\n        setModal(true);\n      } else {\n        ks.removeColumn(column);\n      }\n    }}>Remove column</MenuItem>\n    <MenuItem onClick={() => {setMenu(false); ks.createNewCard(column)}}>Add card</MenuItem>\n  </Menu>\n  <div className={styles.Column} ref={drop}>\n    <IconButton\n      className={styles.Settings}\n      aria-label='settings'\n      onClick={(ev: any) => {setMenu(true); setMenuAnchorEl(ev.target)}}\n      >\n      <MoreVert />\n    </IconButton>\n    {rColumn.state === KSS.ColumnStates.data && <><h2>{rColumn.title}</h2>\n    <Paper style={{backgroundColor: rColumn.color}}>\n      {cards.map((card) => {\n        return <Card key={card.key} card={card}></Card>;\n      })}\n    </Paper></>}\n    {rColumn.state === KSS.ColumnStates.edit && <><h2>Edit</h2>\n    <Paper style={{backgroundColor: rColumn.color}}>\n      <MUICard>\n        <CardContent>\n          <TextField\n                label='Title'\n                defaultValue={rColumn.title}\n                fullWidth={true}\n                margin='normal'\n                onChange={(ev) => {rColumn.title = ev.target.value; ks.columns.trigger();}}\n              />\n          <BlockPicker\n            className={styles.ColorPicker}\n            color={rColumn.color}\n            onChange={color => {rColumn.color = color.hex; ks.columns.trigger();}}\n            triangle={'hide'}\n          />\n          <Button onClick={() => {ks.setColumnStateByColumn(rColumn, KSS.ColumnStates.data)}} variant='contained' color='primary' fullWidth={true}>Save</Button>\n        </CardContent>\n      </MUICard>\n    </Paper></>}\n  </div></>\n)};\n\nexport default Column;\n","/home/noel/git/dirico/src/components/Header/Header.tsx",["68"],"import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MoreVert from '@material-ui/icons/MoreVert';\nimport styles from './Header.module.scss';\nimport { Menu, MenuItem } from '@material-ui/core';\nimport * as KSS from '../../services/KanbanState.service';\n\nconst ks = KSS.default._();\n\n/**\n * Adding Columns\n */\nconst Header: React.FC = () => {\n  const [menu, setMenu] = React.useState(false);\n  const [menuAnchorEl, setMenuAnchorEl] = React.useState();\n  return (\n  <>\n    <Menu\n      open={menu}\n      onClose={() => setMenu(false)}\n      anchorEl={menuAnchorEl}\n    >\n      <MenuItem onClick={() => {setMenu(false); ks.createNewColumn()}}>Add column</MenuItem>\n    </Menu>\n    <AppBar position='static'>\n      <Toolbar>\n        <IconButton aria-label='display more actions' edge='end' color='inherit' onClick={(ev: any) => {setMenuAnchorEl(ev.target); setMenu(true);}}>\n          <MoreVert />\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n  </>\n)};\n\nexport default Header;\n","/home/noel/git/dirico/src/services/KanbanState.service.ts",["69"],"/home/noel/git/dirico/src/components/Card/Card.tsx",["70","71","72","73","74","75","76","77"],"import React from 'react';\nimport styles from './Card.module.scss';\nimport MoreVert from '@material-ui/icons/MoreVert';\nimport MUICard from '@material-ui/core/Card';\nimport * as KSS from '../../services/KanbanState.service';\nimport { BetterBehaviorSubject, OnBehaviorSubjectHook } from '../../Helper';\nimport { TextField, CardHeader, CardMedia, CardContent, IconButton, Typography, Button, Menu, MenuItem, FormControlLabel, Checkbox } from '@material-ui/core';\nimport { DropzoneDialogBase } from 'material-ui-dropzone';\nimport { Field } from '../../services/KanbanState.service';\nimport { useDrag } from 'react-dnd';\n\nconst ks = KSS.default._();\n\n/**\n * Displaying, editing KSS.Card data\n * Hidding KSS.Fields data\n */\nconst Card: React.FC<{card: KSS.Card}> = ({card}) => {\n  const [dropzoneDialogVisibility, setDropzoneDialogVisibility] = React.useState(false);\n  const [menu, setMenu] = React.useState(false);\n  const [menuAnchorEl, setMenuAnchorEl] = React.useState();\n\n  const [title, setTitle] = OnBehaviorSubjectHook<{field: KSS.Field; value: any;}[]>(ks.cards, () => ks.getFieldsByType(card, KSS.FieldTypes.title));\n  const [subheader, setSubheader] = OnBehaviorSubjectHook<{field: KSS.Field; value: any;}[]>(ks.cards, () => ks.getFieldsByType(card, KSS.FieldTypes.subheader));\n  const [image, setImage] = OnBehaviorSubjectHook<{field: KSS.Field; value: any;}[]>(ks.cards, () => ks.getFieldsByType(card, KSS.FieldTypes.image))\n  const [paragraphs, setParagraphs] = OnBehaviorSubjectHook<Array<any>>(ks.cards, () => ks.getFieldsByType(card, KSS.FieldTypes.paragraph));\n  const [fields, setFields] = OnBehaviorSubjectHook<{ field: KSS.Field; value: any; }[]>(ks.fields, () => [...card.fields]);\n\n  const checkVisibility = (field: { field: Field; value: any; }) => field.field.state === KSS.FieldStates.visible;\n\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: 'card', card: card },\n    collect: (monitor) => ({\n      isDragging: !!monitor.isDragging(),\n      card\n    })\n  });\n\n  return (\n    <div className={styles.Card} ref={drag}>\n      <Menu\n        open={menu}\n        onClose={() => setMenu(false)}\n        anchorEl={menuAnchorEl}\n      >\n        <MenuItem onClick={() => {setMenu(false); ks.setCardDisplayStateByCard(card, KSS.CardStates.edit)}}>Edit card</MenuItem>\n        <MenuItem onClick={() => {setMenu(false); ks.removeCardByCard(card)}}>Remove card</MenuItem>\n        <MenuItem onClick={() => {setMenu(false); ks.setCardDisplayStateByCard(card, KSS.CardStates.hide)}}>Hide fields</MenuItem>\n      </Menu>\n      {card.state === KSS.CardStates.hide && <MUICard>\n       <CardHeader\n          className={styles.CardHeader}\n          title='Hide fields'\n        />\n        <CardContent>\n          {fields.map(field => {\n            return <div key={field.field.key}><FormControlLabel\n              control={<Checkbox checked={field.field.state === KSS.FieldStates.hidden}\n              onChange={() => {ks.setFieldStateByField(field.field, field.field.state === KSS.FieldStates.hidden ? KSS.FieldStates.visible : KSS.FieldStates.hidden)}} />} label={field.field.name} /></div>;\n          })}\n          <Button onClick={() => {ks.setCardDisplayStateByCard(card, KSS.CardStates.data)}} variant='contained' color='primary' fullWidth={true}>Save</Button>\n        </CardContent>\n      </MUICard>}\n      {card.state === KSS.CardStates.edit && <MUICard>\n        <CardHeader\n          className={styles.CardHeader}\n          action={\n            <IconButton aria-label='settings'>\n              <MoreVert />\n            </IconButton>\n          }\n          onClick={(ev: any) => {setMenu(true); setMenuAnchorEl(ev.target)}}\n          title='Edit'\n        />\n        <CardContent>\n          {checkVisibility(title[0]) && <TextField\n            label='Title'\n            defaultValue={title[0].value}\n            fullWidth={true}\n            margin={'normal'}\n            onChange={(ev) => ks.replaceFieldByType(card, KSS.FieldTypes.title, ev.target.value)}\n          />}\n          {checkVisibility(subheader[0]) && <TextField\n            label='Publish date'\n            defaultValue={subheader[0].value}\n            type='datetime-local'\n            fullWidth={true}\n            margin='normal'\n            onChange={(ev) => ks.replaceFieldByType(card, KSS.FieldTypes.subheader, ev.target.value)}\n          />}\n          {checkVisibility(image[0]) && <div className={styles.FormImage}>\n            <img src={image[0].value} onClick={() => setDropzoneDialogVisibility(true)} />\n          </div>}\n          <DropzoneDialogBase\n            dialogProps={{} as any}\n            fileObjects={{} as any}\n            acceptedFiles={['image/*']}\n            filesLimit={1}\n            onAdd={(files: any) => {ks.replaceFieldByType(card, KSS.FieldTypes.image, files[0].data); setDropzoneDialogVisibility(false);}}\n            open={dropzoneDialogVisibility}\n            onClose={() => setDropzoneDialogVisibility(false)}\n          />\n          {paragraphs.map((paragraphField, index) => {\n            return <>{checkVisibility(paragraphField) && <TextField\n              label='Description'\n              multiline\n              rows={4}\n              defaultValue={paragraphField.value}\n              fullWidth={true}\n              margin='normal'\n              onChange={(ev) => ks.replaceFieldByType(card, KSS.FieldTypes.paragraph, ev.target.value, index)}\n            />}</>\n          })}\n          <Button onClick={() => {ks.setCardDisplayStateByCard(card, KSS.CardStates.data)}} variant='contained' color='primary' fullWidth={true}>Save</Button>\n        </CardContent>\n      </MUICard>}\n      {card.state === KSS.CardStates.data && <MUICard>\n        <CardHeader\n          className={styles.CardHeader}\n          action={\n            <IconButton aria-label='settings'>\n              <MoreVert />\n            </IconButton>\n          }\n          onClick={(ev: any) => {setMenu(true); setMenuAnchorEl(ev.target)}}\n          title={checkVisibility(title[0]) ? title[0].value : ''}\n          subheader={checkVisibility(subheader[0]) ? subheader[0].value : ''}\n          titleTypographyProps={{variant:'body2' }}\n          subheaderTypographyProps={{variant:'body2' }}\n        />\n        {checkVisibility(image[0]) && <CardMedia\n          className={styles.CardHeaderImage}\n          image={image[0].value}\n        />}\n        <CardContent>\n          {paragraphs.map(paragraphField => {\n            return <>{checkVisibility(paragraphField) && <Typography variant='body2' color='textSecondary' component='p'>{paragraphField.value}</Typography>}</>;\n          })}\n          \n        </CardContent>\n      </MUICard>}\n    </div>\n  );\n}\n\nexport default Card;\n",["78","79"],"/home/noel/git/dirico/src/components/Overview/Overview.tsx",["80"],"/home/noel/git/dirico/src/Helper.tsx",["81","82"],"import { useEffect, useState } from \"react\";\nimport { BehaviorSubject } from \"rxjs\";\n\nconst BehaviorSubjectToHook: <T>(behaviorSubject: BehaviorSubject<any>) => [T, React.Dispatch<React.SetStateAction<T>>] = (behaviorSubject: BehaviorSubject<any>) => {\n    const [subject, setSubject] = useState(behaviorSubject.getValue());\n    \n    useEffect(() => {\n        behaviorSubject.subscribe(val => {\n            setSubject(val);\n        });\n    }, []);\n    return [subject, setSubject];\n};\n\nconst OnBehaviorSubjectHook: <T>(behaviorSubject: BehaviorSubject<any>, valReq: () => any) => [T,  React.Dispatch<React.SetStateAction<T>>] =  (behaviorSubject: BehaviorSubject<any>, valReq: () => any) => {\n    const [subject, setSubject] = useState(valReq());\n\n    useEffect(() => {\n        behaviorSubject.subscribe(() => {\n            setSubject(valReq());\n        });\n    }, []);\n    return [subject, setSubject];\n};\n\nclass BetterBehaviorSubject<T> extends BehaviorSubject<T> {\n    trigger() {\n        const value = this.getValue();\n        if (value instanceof Array) {\n            this.next([...(value as any)] as any);\n        }        \n    }\n}\n\nexport {BehaviorSubjectToHook, OnBehaviorSubjectHook, BetterBehaviorSubject};\n","/home/noel/git/dirico/src/components/Card/Card.stories.tsx",[],["83","84"],"/home/noel/git/dirico/src/components/Column/Column.stories.tsx",[],"/home/noel/git/dirico/src/components/Header/Header.stories.tsx",[],"/home/noel/git/dirico/src/components/Overview/Overview.stories.tsx",[],{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":5,"column":10,"nodeType":"91","messageId":"92","endLine":5,"endColumn":22},{"ruleId":"89","severity":1,"message":"93","line":24,"column":17,"nodeType":"91","messageId":"92","endLine":24,"endColumn":25},{"ruleId":"89","severity":1,"message":"94","line":25,"column":19,"nodeType":"91","messageId":"92","endLine":25,"endColumn":28},{"ruleId":"89","severity":1,"message":"95","line":27,"column":12,"nodeType":"91","messageId":"92","endLine":27,"endColumn":18},{"ruleId":"89","severity":1,"message":"96","line":6,"column":8,"nodeType":"91","messageId":"92","endLine":6,"endColumn":14},{"ruleId":"97","severity":1,"message":"98","line":127,"column":34,"nodeType":"99","messageId":"100","endLine":127,"endColumn":36},{"ruleId":"89","severity":1,"message":"101","line":6,"column":10,"nodeType":"91","messageId":"92","endLine":6,"endColumn":31},{"ruleId":"89","severity":1,"message":"102","line":23,"column":17,"nodeType":"91","messageId":"92","endLine":23,"endColumn":25},{"ruleId":"89","severity":1,"message":"103","line":24,"column":21,"nodeType":"91","messageId":"92","endLine":24,"endColumn":33},{"ruleId":"89","severity":1,"message":"104","line":25,"column":17,"nodeType":"91","messageId":"92","endLine":25,"endColumn":25},{"ruleId":"89","severity":1,"message":"105","line":26,"column":22,"nodeType":"91","messageId":"92","endLine":26,"endColumn":35},{"ruleId":"89","severity":1,"message":"106","line":27,"column":18,"nodeType":"91","messageId":"92","endLine":27,"endColumn":27},{"ruleId":"89","severity":1,"message":"107","line":31,"column":12,"nodeType":"91","messageId":"92","endLine":31,"endColumn":22},{"ruleId":"108","severity":1,"message":"109","line":92,"column":13,"nodeType":"110","endLine":92,"endColumn":91},{"ruleId":"85","replacedBy":"111"},{"ruleId":"87","replacedBy":"112"},{"ruleId":"89","severity":1,"message":"113","line":12,"column":19,"nodeType":"91","messageId":"92","endLine":12,"endColumn":29},{"ruleId":"114","severity":1,"message":"115","line":11,"column":8,"nodeType":"116","endLine":11,"endColumn":10,"suggestions":"117"},{"ruleId":"114","severity":1,"message":"118","line":22,"column":8,"nodeType":"116","endLine":22,"endColumn":10,"suggestions":"119"},{"ruleId":"85","replacedBy":"120"},{"ruleId":"87","replacedBy":"121"},"no-native-reassign",["122"],"no-negated-in-lhs",["123"],"@typescript-eslint/no-unused-vars","'ColumnStates' is defined but never used.","Identifier","unusedVar","'setCards' is assigned a value but never used.","'setColumn' is assigned a value but never used.","'isOver' is assigned a value but never used.","'styles' is defined but never used.","array-callback-return","Array.prototype.filter() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'BetterBehaviorSubject' is defined but never used.","'setTitle' is assigned a value but never used.","'setSubheader' is assigned a value but never used.","'setImage' is assigned a value but never used.","'setParagraphs' is assigned a value but never used.","'setFields' is assigned a value but never used.","'isDragging' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["122"],["123"],"'setColumns' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'behaviorSubject'. Either include it or remove the dependency array.","ArrayExpression",["124"],"React Hook useEffect has missing dependencies: 'behaviorSubject' and 'valReq'. Either include them or remove the dependency array. If 'valReq' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["125"],["122"],["123"],"no-global-assign","no-unsafe-negation",{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},"Update the dependencies array to be: [behaviorSubject]",{"range":"130","text":"131"},"Update the dependencies array to be: [behaviorSubject, valReq]",{"range":"132","text":"133"},[443,445],"[behaviorSubject]",[865,867],"[behaviorSubject, valReq]"]