[{"/home/noel/git/dirico/src/index.tsx":"1","/home/noel/git/dirico/src/reportWebVitals.ts":"2","/home/noel/git/dirico/src/App.tsx":"3","/home/noel/git/dirico/src/components/Column/Column.tsx":"4","/home/noel/git/dirico/src/components/Header/Header.tsx":"5","/home/noel/git/dirico/src/services/KanbanState.service.ts":"6","/home/noel/git/dirico/src/components/Card/Card.tsx":"7","/home/noel/git/dirico/src/components/Overview/Overview.tsx":"8","/home/noel/git/dirico/src/Helper.tsx":"9","/home/noel/git/dirico/src/components/Card/Card.stories.tsx":"10","/home/noel/git/dirico/src/components/Column/Column.stories.tsx":"11","/home/noel/git/dirico/src/components/Header/Header.stories.tsx":"12","/home/noel/git/dirico/src/components/Overview/Overview.stories.tsx":"13"},{"size":501,"mtime":1608026009746,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":1608025076663,"results":"16","hashOfConfig":"15"},{"size":3890,"mtime":1608420394274,"results":"17","hashOfConfig":"15"},{"size":3891,"mtime":1608420079057,"results":"18","hashOfConfig":"15"},{"size":1078,"mtime":1608261693536,"results":"19","hashOfConfig":"15"},{"size":4293,"mtime":1608422221382,"results":"20","hashOfConfig":"15"},{"size":6608,"mtime":1608422119544,"results":"21","hashOfConfig":"15"},{"size":675,"mtime":1608420476869,"results":"22","hashOfConfig":"15"},{"size":1290,"mtime":1608405512372,"results":"23","hashOfConfig":"15"},{"size":297,"mtime":1608038291634,"results":"24","hashOfConfig":"15"},{"size":310,"mtime":1608038211255,"results":"25","hashOfConfig":"15"},{"size":188,"mtime":1608026820929,"results":"26","hashOfConfig":"15"},{"size":196,"mtime":1608027339324,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1nhrloj",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/home/noel/git/dirico/src/index.tsx",[],["62","63"],"/home/noel/git/dirico/src/reportWebVitals.ts",[],"/home/noel/git/dirico/src/App.tsx",["64"],"/home/noel/git/dirico/src/components/Column/Column.tsx",["65","66","67"],"import React from 'react';\nimport styles from './Column.module.scss';\nimport Paper from '@material-ui/core/Paper';\nimport Card from '../Card/Card';\nimport * as KSS from '../../services/KanbanState.service';\nimport { OnBehaviorSubjectHook } from '../../Helper';\nimport { Button, CardContent, IconButton, Menu, MenuItem, Dialog, TextField, DialogContent, DialogContentText, DialogActions, DialogTitle } from '@material-ui/core';\nimport { BlockPicker } from 'react-color';\nimport { MoreVert } from '@material-ui/icons';\nimport MUICard from '@material-ui/core/Card';\nimport { useDrop } from 'react-dnd';\n\nconst ks = KSS.default._();\n\nconst Column: React.FC<{ column: KSS.Column }> = ({column}) => {\n  const [menu, setMenu] = React.useState(false);\n  const [menuAnchorEl, setMenuAnchorEl] = React.useState();\n  const [modal, setModal] = React.useState(false);\n  \n  const [cards, setCards] = OnBehaviorSubjectHook<Array<KSS.Card>>(ks.cards, () => ks.getCardsByColumn(column));\n  const [rColumn, setColumn] = OnBehaviorSubjectHook<KSS.Column>(ks.columns, () => column);\n\n  const [{ isOver }, drop] = useDrop({\n    accept: 'card',\n    drop: (dowt) => {\n      const card = ((dowt as any).card as KSS.Card);\n      ks.moveCardToColumn(card, column);\n    },\n    collect: (monitor) => ({\n      isOver: !!monitor.isOver()\n    })\n  });\n\n  return (\n  <>\n  <Dialog\n    open={modal}\n    onClose={() => setModal(false)}\n    aria-labelledby='simple-modal-title'\n    aria-describedby='simple-modal-description'\n  >\n    <DialogTitle>Removes cards?</DialogTitle>\n    <DialogContent>\n      <DialogContentText>Do you want to remove this Column and all Cards inside it?</DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button variant='contained' color='secondary' onClick={() => {setModal(false); ks.removeColumn(column);}}>Yes</Button>\n      <Button variant='contained' color='primary' onClick={() => {setModal(false);}}>No</Button>\n    </DialogActions>\n  </Dialog>\n  <Menu\n    open={menu}\n    onClose={() => setMenu(false)}\n    anchorEl={menuAnchorEl}\n  >\n    <MenuItem onClick={() => {setMenu(false); ks.setColumnStateByColumn(column, KSS.ColumnStates.edit)}}>Edit Column</MenuItem>\n    <MenuItem onClick={() => {\n      setMenu(false);\n      if (ks.getCardsByColumn(column).length >  0) {\n        setModal(true);\n      } else {\n        ks.removeColumn(column);\n      }\n    }}>Remove Column</MenuItem>\n    <MenuItem onClick={() => {setMenu(false); ks.createNewCard(column)}}>Add Card</MenuItem>\n  </Menu>\n  <div className={styles.Column} ref={drop}>\n    <IconButton\n      className={styles.Settings}\n      aria-label='settings'\n      onClick={(ev: any) => {setMenu(true); setMenuAnchorEl(ev.target)}}\n      >\n      <MoreVert />\n    </IconButton>\n    {rColumn.state === KSS.ColumnStates.data && <><h2>{rColumn.title}</h2>\n    <Paper style={{backgroundColor: rColumn.color}}>\n      {cards.map((card) => {\n        return <Card key={card.key} card={card}></Card>;\n      })}\n    </Paper></>}\n    {rColumn.state === KSS.ColumnStates.edit && <><h2>Edit</h2>\n    <Paper style={{backgroundColor: rColumn.color}}>\n      <MUICard>\n        <CardContent>\n          <TextField\n                label='Title'\n                defaultValue={rColumn.title}\n                fullWidth={true}\n                margin='normal'\n                onChange={(ev) => {rColumn.title = ev.target.value; ks.columns.trigger();}}\n              />\n          <BlockPicker\n            className={styles.ColorPicker}\n            color={rColumn.color}\n            onChange={color => {rColumn.color = color.hex; ks.columns.trigger();}}\n            triangle={'hide'}\n          />\n          <Button onClick={() => {ks.setColumnStateByColumn(rColumn, KSS.ColumnStates.data)}} variant='contained' color='primary' fullWidth={true}>Save</Button>\n        </CardContent>\n      </MUICard>\n    </Paper></>}\n  </div></>\n)};\n\nexport default Column;\n",["68","69"],"/home/noel/git/dirico/src/components/Header/Header.tsx",["70"],"import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MoreVert from '@material-ui/icons/MoreVert';\nimport styles from './Header.module.scss';\nimport { Menu, MenuItem } from '@material-ui/core';\nimport * as KSS from '../../services/KanbanState.service';\n\nconst ks = KSS.default._();\n\nconst Header: React.FC = () => {\n  const [menu, setMenu] = React.useState(false);\n  const [menuAnchorEl, setMenuAnchorEl] = React.useState();\n  return (\n  <>\n    <Menu\n      open={menu}\n      onClose={() => setMenu(false)}\n      anchorEl={menuAnchorEl}\n    >\n      <MenuItem onClick={() => {setMenu(false); ks.createNewColumn()}}>Add</MenuItem>\n    </Menu>\n    <AppBar position='static'>\n      <Toolbar>\n        <IconButton aria-label='display more actions' edge='end' color='inherit' onClick={(ev: any) => {setMenuAnchorEl(ev.target); setMenu(true);}}>\n          <MoreVert />\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n  </>\n)};\n\nexport default Header;\n","/home/noel/git/dirico/src/services/KanbanState.service.ts",["71"],"import { BetterBehaviorSubject } from \"../Helper\";\nimport { v4 as uuid } from 'uuid';\n\nenum FieldTypes {title, subheader, image, paragraph}\nenum CardStates {data, edit, hide}\nenum FieldStates {visible, hidden}\nenum ColumnStates {data, edit, dnd}\n\nexport type Column = {key: string, title: string; position: number; color: string, state: ColumnStates};\nexport type Card = {key: string, column: Column, fields: Array<{field: Field, value: string}>, state: CardStates};\nexport type Field = {key: string, name: string, type: FieldTypes, state: FieldStates};\n\nclass KanbanState {\n    private static KanbanState:KanbanState;\n\n    public columns = new BetterBehaviorSubject(new Array<Column>());\n    public cards = new BetterBehaviorSubject(new Array<Card>());\n    public fields = new BetterBehaviorSubject(new Array<Field>());\n\n    private constructor() {}\n\n    public static _() {\n        if (KanbanState.KanbanState) {\n            return KanbanState.KanbanState;\n        } else {\n            KanbanState.KanbanState = new KanbanState();\n            return KanbanState.KanbanState;\n        }\n    }\n\n    moveCardToColumn(card: Card, column: Column) {\n        card.column = column;\n        this.cards.trigger();\n    }\n\n    createNewCard(column: Column) {\n        const cards = this.cards.getValue();\n        const fields = this.fields.getValue();\n        const newFields = fields.map(field => {\n            const newField = {field: field, value: ''};\n            switch (field.name) {\n                case 'attachment' :\n                    newField.value = 'https://placekitten.com/408/287'; break;\n                case 'publish-date' :\n                    newField.value = new Date(Date.now()).toISOString().substr(0, 16); break;\n            }\n            return newField;\n        });\n        cards.push({key: uuid(), column, fields: newFields, state: CardStates.edit})\n        this.cards.trigger();\n    }\n\n    setColumnStateByColumn(column: Column, columnState: ColumnStates) {\n        const columns = this.columns.getValue();\n        columns[columns.indexOf(column)].state = columnState;\n        this.columns.trigger();\n    }\n\n    removeColumn(column: Column) {\n        const columns = this.columns.getValue();\n        const cards = this.getCardsByColumn(column);\n        cards.forEach(card => this.removeCardByCard(card));\n        columns.splice(columns.indexOf(column), 1);\n        this.columns.trigger();\n    }\n\n    createNewColumn() {\n        const columns = this.columns.getValue();\n        columns.push({key: uuid(), position: columns.length, title: '', color: '#fff', state: ColumnStates.edit});\n        this.columns.trigger();\n    }\n\n    setFieldStateByField(field: Field, fieldState: FieldStates) {\n        const fields = this.fields.getValue();\n        fields[fields.indexOf(field)].state = fieldState;\n        this.fields.trigger();\n        this.cards.trigger(); // I dont understand why in this case a full rerender of the cards is needed\n    }\n\n    removeCardByCard(card: Card) {\n        const cards = this.cards.getValue();\n        cards.splice(cards.indexOf(card), 1);\n        this.cards.trigger();\n    }\n\n    setCardDisplayStateByCard(card: Card, cardState: CardStates) {\n        card.state = cardState;\n        this.cards.trigger();\n    }\n\n    getCardsByColumn(column: Column) {\n        const cards = this.cards.getValue().filter(card => card.column.position === column.position);\n        console.log(cards, 'cards - getCardsByColumn');\n        return [...cards];\n    }\n\n    getFieldsByType(card: Card, fieldType: FieldTypes) {\n        card.fields.filter(field => {if (!field) debugger;});\n        const fields = card.fields.filter(field => field.field.type === fieldType);\n        return [...fields];\n    }\n\n    replaceFieldByType(card: Card, fieldType: FieldTypes, newValue: any, index?: number) {\n        let indexCount = 0;\n        card.fields = card.fields.map(field => {\n            if (field.field.type === fieldType) {\n                if (index && indexCount !== index) {\n                    indexCount++;\n                } else {\n                    field.value = newValue;\n                }\n            }\n            return field;\n        });\n        this.cards.trigger();\n    }\n}\n\nexport default KanbanState;\nexport {FieldTypes, CardStates, FieldStates, ColumnStates};","/home/noel/git/dirico/src/components/Card/Card.tsx",["72","73","74","75","76","77","78","79","80"],"import React from 'react';\nimport styles from './Card.module.scss';\nimport MoreVert from '@material-ui/icons/MoreVert';\nimport MUICard from '@material-ui/core/Card';\nimport * as KSS from '../../services/KanbanState.service';\nimport { BetterBehaviorSubject, OnBehaviorSubjectHook } from '../../Helper';\nimport { TextField, CardHeader, CardMedia, CardContent, IconButton, Typography, Button, Menu, MenuItem, FormControlLabel, Checkbox } from '@material-ui/core';\nimport { DropzoneDialogBase } from 'material-ui-dropzone';\nimport { Field } from '../../services/KanbanState.service';\nimport { DragSource, useDrag } from 'react-dnd';\n\nconst ks = KSS.default._();\n\nconst Card: React.FC<{ card: KSS.Card }> = ({card}) => {\n  const [dropzoneDialogVisibility, setDropzoneDialogVisibility] = React.useState(false);\n  const [menu, setMenu] = React.useState(false);\n  const [menuAnchorEl, setMenuAnchorEl] = React.useState();\n\n  const [title, setTitle] = OnBehaviorSubjectHook<{field: KSS.Field; value: any;}[]>(ks.cards, () => ks.getFieldsByType(card, KSS.FieldTypes.title));\n  const [subheader, setSubheader] = OnBehaviorSubjectHook<{field: KSS.Field; value: any;}[]>(ks.cards, () => ks.getFieldsByType(card, KSS.FieldTypes.subheader));\n  const [image, setImage] = OnBehaviorSubjectHook<{field: KSS.Field; value: any;}[]>(ks.cards, () => ks.getFieldsByType(card, KSS.FieldTypes.image))\n  const [paragraphs, setParagraphs] = OnBehaviorSubjectHook<Array<any>>(ks.cards, () => ks.getFieldsByType(card, KSS.FieldTypes.paragraph));\n  const [fields, setFields] = OnBehaviorSubjectHook<{ field: KSS.Field; value: any; }[]>(ks.fields, () => card.fields);\n\n  const checkVisibility = (field: { field: Field; value: any; }) => field.field.state === KSS.FieldStates.visible;\n\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: 'card', card: card },\n    collect: (monitor) => ({\n      isDragging: !!monitor.isDragging(),\n      card\n    })\n  });\n\n  return (\n    <div className={styles.Card} ref={drag}>\n      <Menu\n        open={menu}\n        onClose={() => setMenu(false)}\n        anchorEl={menuAnchorEl}\n      >\n        <MenuItem onClick={() => {setMenu(false); ks.setCardDisplayStateByCard(card, KSS.CardStates.edit)}}>Edit</MenuItem>\n        <MenuItem onClick={() => {setMenu(false); ks.removeCardByCard(card)}}>Remove</MenuItem>\n        <MenuItem onClick={() => {setMenu(false); ks.setCardDisplayStateByCard(card, KSS.CardStates.hide)}}>Hide fields</MenuItem>\n      </Menu>\n      {card.state === KSS.CardStates.hide && <MUICard>\n       <CardHeader\n          className={styles.CardHeader}\n          title='Hide fields'\n        />\n        <CardContent>\n          {fields.map(field => {\n            return <div key={field.field.key}><FormControlLabel\n              control={<Checkbox checked={field.field.state === KSS.FieldStates.hidden}\n              onChange={() => {ks.setFieldStateByField(field.field, field.field.state === KSS.FieldStates.hidden ? KSS.FieldStates.visible : KSS.FieldStates.hidden)}} />} label={field.field.name} /></div>;\n          })}\n          <Button onClick={() => {ks.setCardDisplayStateByCard(card, KSS.CardStates.data)}} variant='contained' color='primary' fullWidth={true}>Save</Button>\n        </CardContent>\n      </MUICard>}\n      {card.state === KSS.CardStates.edit && <MUICard>\n        <CardHeader\n          className={styles.CardHeader}\n          action={\n            <IconButton aria-label='settings'>\n              <MoreVert />\n            </IconButton>\n          }\n          onClick={(ev: any) => {setMenu(true); console.log(ev); setMenuAnchorEl(ev.target)}}\n          title='Edit'\n        />\n        <CardContent>\n          {checkVisibility(title[0]) && <TextField\n            label='Title'\n            defaultValue={title[0].value}\n            fullWidth={true}\n            margin={'normal'}\n            onChange={(ev) => ks.replaceFieldByType(card, KSS.FieldTypes.title, ev.target.value)}\n          />}\n          {checkVisibility(subheader[0]) && <TextField\n            label='Publish date'\n            defaultValue={subheader[0].value}\n            type='datetime-local'\n            fullWidth={true}\n            margin='normal'\n            onChange={(ev) => ks.replaceFieldByType(card, KSS.FieldTypes.subheader, ev.target.value)}\n          />}\n          {checkVisibility(image[0]) && <div className={styles.FormImage}>\n            <img src={image[0].value} onClick={() => setDropzoneDialogVisibility(true)} />\n          </div>}\n          <DropzoneDialogBase\n            dialogProps={{} as any}\n            fileObjects={{} as any}\n            acceptedFiles={['image/*']}\n            filesLimit={1}\n            onAdd={(files: any) => {ks.replaceFieldByType(card, KSS.FieldTypes.image, files[0].data); setDropzoneDialogVisibility(false);}}\n            open={dropzoneDialogVisibility}\n            onClose={() => setDropzoneDialogVisibility(false)}\n          />\n          {paragraphs.map((paragraphField, index) => {\n            return <>{checkVisibility(paragraphField) && <TextField\n              label='Description'\n              multiline\n              rows={4}\n              defaultValue={paragraphField.value}\n              fullWidth={true}\n              margin='normal'\n              onChange={(ev) => ks.replaceFieldByType(card, KSS.FieldTypes.paragraph, ev.target.value, index)}\n            />}</>\n          })}\n          <Button onClick={() => {ks.setCardDisplayStateByCard(card, KSS.CardStates.data)}} variant='contained' color='primary' fullWidth={true}>Save</Button>\n        </CardContent>\n      </MUICard>}\n      {card.state === KSS.CardStates.data && <MUICard>\n        <CardHeader\n          className={styles.CardHeader}\n          action={\n            <IconButton aria-label='settings'>\n              <MoreVert />\n            </IconButton>\n          }\n          onClick={(ev: any) => {setMenu(true); setMenuAnchorEl(ev.target)}}\n          title={checkVisibility(title[0]) ? title[0].value : ''}\n          subheader={checkVisibility(subheader[0]) ? subheader[0].value : ''}\n          titleTypographyProps={{variant:'body2' }}\n          subheaderTypographyProps={{variant:'body2' }}\n        />\n        {checkVisibility(image[0]) && <CardMedia\n          className={styles.CardHeaderImage}\n          image={image[0].value}\n        />}\n        <CardContent>\n          {paragraphs.map(paragraphField => {\n            return <>{checkVisibility(paragraphField) && <Typography variant='body2' color='textSecondary' component='p'>{paragraphField.value}</Typography>}</>;\n          })}\n          \n        </CardContent>\n      </MUICard>}\n    </div>\n  );\n\n}\n\nexport default Card;\n","/home/noel/git/dirico/src/components/Overview/Overview.tsx",["81"],"import React from 'react';\nimport { OnBehaviorSubjectHook } from '../../Helper';\nimport * as KSS from '../../services/KanbanState.service';\nimport Column from '../Column/Column';\nimport styles from './Overview.module.scss';\n\nconst ks = KSS.default._();\n\nconst Overview: React.FC = () => {\n  const [columns, setColumns] = OnBehaviorSubjectHook<Array<KSS.Column>>(ks.columns, () => ks.columns.getValue());\n\n  return (\n  <div className={styles.Overview}>\n    {columns.sort((ca, cb) => ca.position - cb.position).map(column => {\n      console.log(column, 'column'); \n      return <Column key={column.key} column={column}></Column>;\n    })}\n  </div>\n)};\n\nexport default Overview;\n","/home/noel/git/dirico/src/Helper.tsx",["82","83"],"import { useEffect, useState } from \"react\";\nimport { BehaviorSubject } from \"rxjs\";\n\nconst BehaviorSubjectToHook: <T>(behaviorSubject: BehaviorSubject<any>) => [T, React.Dispatch<React.SetStateAction<T>>] = (behaviorSubject: BehaviorSubject<any>) => {\n    const [subject, setSubject] = useState(behaviorSubject.getValue());\n    \n    useEffect(() => {\n        behaviorSubject.subscribe(val => {\n            setSubject(val);\n        });\n    }, []);\n    return [subject, setSubject];\n};\n\nconst OnBehaviorSubjectHook: <T>(behaviorSubject: BehaviorSubject<any>, valReq: () => any) => [T,  React.Dispatch<React.SetStateAction<T>>] =  (behaviorSubject: BehaviorSubject<any>, valReq: () => any) => {\n    const [subject, setSubject] = useState(valReq());\n\n    useEffect(() => {\n        behaviorSubject.subscribe(() => {\n            console.log('subscribe trigger', behaviorSubject, valReq());\n            setSubject(valReq());\n        });\n    }, []);\n    return [subject, setSubject];\n};\n\nclass BetterBehaviorSubject<T> extends BehaviorSubject<T> {\n    trigger() {\n        const value = this.getValue();\n        if (value instanceof Array) {\n            this.next([...(value as any)] as any);\n        }        \n    }\n}\n\nexport {BehaviorSubjectToHook, OnBehaviorSubjectHook, BetterBehaviorSubject};\n","/home/noel/git/dirico/src/components/Card/Card.stories.tsx",[],"/home/noel/git/dirico/src/components/Column/Column.stories.tsx",[],"/home/noel/git/dirico/src/components/Header/Header.stories.tsx",[],"/home/noel/git/dirico/src/components/Overview/Overview.stories.tsx",[],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":5,"column":10,"nodeType":"90","messageId":"91","endLine":5,"endColumn":22},{"ruleId":"88","severity":1,"message":"92","line":20,"column":17,"nodeType":"90","messageId":"91","endLine":20,"endColumn":25},{"ruleId":"88","severity":1,"message":"93","line":21,"column":19,"nodeType":"90","messageId":"91","endLine":21,"endColumn":28},{"ruleId":"88","severity":1,"message":"94","line":23,"column":12,"nodeType":"90","messageId":"91","endLine":23,"endColumn":18},{"ruleId":"84","replacedBy":"95"},{"ruleId":"86","replacedBy":"96"},{"ruleId":"88","severity":1,"message":"97","line":6,"column":8,"nodeType":"90","messageId":"91","endLine":6,"endColumn":14},{"ruleId":"98","severity":1,"message":"99","line":98,"column":34,"nodeType":"100","messageId":"101","endLine":98,"endColumn":36},{"ruleId":"88","severity":1,"message":"102","line":6,"column":10,"nodeType":"90","messageId":"91","endLine":6,"endColumn":31},{"ruleId":"88","severity":1,"message":"103","line":10,"column":10,"nodeType":"90","messageId":"91","endLine":10,"endColumn":20},{"ruleId":"88","severity":1,"message":"104","line":19,"column":17,"nodeType":"90","messageId":"91","endLine":19,"endColumn":25},{"ruleId":"88","severity":1,"message":"105","line":20,"column":21,"nodeType":"90","messageId":"91","endLine":20,"endColumn":33},{"ruleId":"88","severity":1,"message":"106","line":21,"column":17,"nodeType":"90","messageId":"91","endLine":21,"endColumn":25},{"ruleId":"88","severity":1,"message":"107","line":22,"column":22,"nodeType":"90","messageId":"91","endLine":22,"endColumn":35},{"ruleId":"88","severity":1,"message":"108","line":23,"column":18,"nodeType":"90","messageId":"91","endLine":23,"endColumn":27},{"ruleId":"88","severity":1,"message":"109","line":27,"column":12,"nodeType":"90","messageId":"91","endLine":27,"endColumn":22},{"ruleId":"110","severity":1,"message":"111","line":88,"column":13,"nodeType":"112","endLine":88,"endColumn":91},{"ruleId":"88","severity":1,"message":"113","line":10,"column":19,"nodeType":"90","messageId":"91","endLine":10,"endColumn":29},{"ruleId":"114","severity":1,"message":"115","line":11,"column":8,"nodeType":"116","endLine":11,"endColumn":10,"suggestions":"117"},{"ruleId":"114","severity":1,"message":"118","line":23,"column":8,"nodeType":"116","endLine":23,"endColumn":10,"suggestions":"119"},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],"@typescript-eslint/no-unused-vars","'ColumnStates' is defined but never used.","Identifier","unusedVar","'setCards' is assigned a value but never used.","'setColumn' is assigned a value but never used.","'isOver' is assigned a value but never used.",["120"],["121"],"'styles' is defined but never used.","array-callback-return","Array.prototype.filter() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'BetterBehaviorSubject' is defined but never used.","'DragSource' is defined but never used.","'setTitle' is assigned a value but never used.","'setSubheader' is assigned a value but never used.","'setImage' is assigned a value but never used.","'setParagraphs' is assigned a value but never used.","'setFields' is assigned a value but never used.","'isDragging' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setColumns' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'behaviorSubject'. Either include it or remove the dependency array.","ArrayExpression",["122"],"React Hook useEffect has missing dependencies: 'behaviorSubject' and 'valReq'. Either include them or remove the dependency array. If 'valReq' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["123"],"no-global-assign","no-unsafe-negation",{"desc":"124","fix":"125"},{"desc":"126","fix":"127"},"Update the dependencies array to be: [behaviorSubject]",{"range":"128","text":"129"},"Update the dependencies array to be: [behaviorSubject, valReq]",{"range":"130","text":"131"},[443,445],"[behaviorSubject]",[938,940],"[behaviorSubject, valReq]"]