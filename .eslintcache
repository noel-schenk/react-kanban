[{"/home/noel/git/dirico/src/index.tsx":"1","/home/noel/git/dirico/src/reportWebVitals.ts":"2","/home/noel/git/dirico/src/App.tsx":"3","/home/noel/git/dirico/src/components/Column/Column.tsx":"4","/home/noel/git/dirico/src/components/Header/Header.tsx":"5","/home/noel/git/dirico/src/services/KanbanState.service.ts":"6","/home/noel/git/dirico/src/components/Card/Card.tsx":"7","/home/noel/git/dirico/src/components/Overview/Overview.tsx":"8","/home/noel/git/dirico/src/Helper.tsx":"9"},{"size":501,"mtime":1608026009746,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":1608025076663,"results":"12","hashOfConfig":"11"},{"size":3682,"mtime":1608325411816,"results":"13","hashOfConfig":"11"},{"size":2698,"mtime":1608325331833,"results":"14","hashOfConfig":"11"},{"size":1078,"mtime":1608261693536,"results":"15","hashOfConfig":"11"},{"size":3682,"mtime":1608326873775,"results":"16","hashOfConfig":"11"},{"size":6319,"mtime":1608326862846,"results":"17","hashOfConfig":"11"},{"size":658,"mtime":1608262358601,"results":"18","hashOfConfig":"11"},{"size":1346,"mtime":1608320900718,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1nhrloj",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/noel/git/dirico/src/index.tsx",[],["42","43"],"/home/noel/git/dirico/src/reportWebVitals.ts",[],"/home/noel/git/dirico/src/App.tsx",["44"],"/home/noel/git/dirico/src/components/Column/Column.tsx",["45","46"],"/home/noel/git/dirico/src/components/Header/Header.tsx",["47"],"import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MoreVert from '@material-ui/icons/MoreVert';\nimport styles from './Header.module.scss';\nimport { Menu, MenuItem } from '@material-ui/core';\nimport * as KSS from '../../services/KanbanState.service';\n\nconst ks = KSS.default._();\n\nconst Header: React.FC = () => {\n  const [menu, setMenu] = React.useState(false);\n  const [menuAnchorEl, setMenuAnchorEl] = React.useState();\n  return (\n  <>\n    <Menu\n      open={menu}\n      onClose={() => setMenu(false)}\n      anchorEl={menuAnchorEl}\n    >\n      <MenuItem onClick={() => {setMenu(false); ks.createNewColumn()}}>Add</MenuItem>\n    </Menu>\n    <AppBar position='static'>\n      <Toolbar>\n        <IconButton aria-label='display more actions' edge='end' color='inherit' onClick={(ev: any) => {setMenuAnchorEl(ev.target); setMenu(true);}}>\n          <MoreVert />\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n  </>\n)};\n\nexport default Header;\n","/home/noel/git/dirico/src/services/KanbanState.service.ts",["48","49"],"import clone from \"clone\";\nimport { BetterBehaviorSubject } from \"../Helper\";\n\nenum FieldTypes {title, subheader, image, paragraph}\nenum CardStates {data, edit, hide}\nenum FieldStates {visible, hidden}\nenum ColumnStates {data, edit}\n\nexport type Column = {title: string; position: number; color: string, state: ColumnStates};\nexport type Card = {column: Column, fields: Array<{field: Field, value: string}>, state: CardStates};\nexport type Field = {name: string, type: FieldTypes, state: FieldStates};\n\nclass KanbanState {\n    private static KanbanState:KanbanState;\n\n    public columns = new BetterBehaviorSubject(new Array<Column>());\n    public cards = new BetterBehaviorSubject(new Array<Card>());\n    public fields = new BetterBehaviorSubject(new Array<Field>());\n\n    private constructor() {}\n\n    public static _() {\n        if (KanbanState.KanbanState) {\n            return KanbanState.KanbanState;\n        } else {\n            KanbanState.KanbanState = new KanbanState();\n            return KanbanState.KanbanState;\n        }\n    }\n\n    createNewCard(column: Column) {\n        const cards = this.cards.getValue();\n        const fields = this.fields.getValue();\n        const newFields = fields.map(field => {\n            const newField = {field: field, value: ''};\n            switch (field.name) {\n                case 'attachment' :\n                    newField.value = 'https://placekitten.com/408/287'; break;\n                case 'publish-date' :\n                    newField.value = new Date(Date.now()).toISOString().substr(0, 16); break;\n            }\n            return newField;\n        });\n        cards.push({column, fields: newFields, state: CardStates.edit})\n        this.cards.trigger();\n    }\n\n    setColumnStateByColumn(column: Column, columnState: ColumnStates) {\n        const columns = this.columns.getValue();\n        columns[columns.indexOf(column)].state = columnState;\n        this.columns.trigger();\n    }\n\n    createNewColumn() {\n        const columns = this.columns.getValue();\n        columns.push({position: columns.length, title: '', color: '#fff', state: ColumnStates.edit});\n        this.columns.trigger();\n    }\n\n    setFieldStateByField(field: Field, fieldState: FieldStates) {\n        const fields = this.fields.getValue();\n        fields[fields.indexOf(field)].state = fieldState;\n        this.fields.trigger();\n        this.cards.trigger(); // I dont understand why in this case a full rerender of the cards is needed\n    }\n\n    removeCardByCard(card: Card) {\n        const cards = this.cards.getValue();\n        cards.splice(cards.indexOf(card), 1);\n        this.cards.trigger();\n    }\n\n    setCardDisplayStateByCard(card: Card, cardState: CardStates) {\n        card.state = cardState;\n        this.cards.trigger();\n    }\n\n    getCardsByColumn(column: Column) {\n        return this.cards.getValue().filter(card => card.column.position === column.position);\n    }\n\n    getFieldByType(card: Card, fieldType: FieldTypes) {\n        card.fields.filter(field => {if (!field) debugger;});\n        return card.fields.filter(field => field.field.type === fieldType);\n    }\n\n    replaceFieldByType(card: Card, fieldType: FieldTypes, newValue: any, index?: number) {\n        let indexCount = 0;\n        card.fields = card.fields.map(field => {\n            if (field.field.type === fieldType) {\n                if (index && indexCount !== index) {\n                    indexCount++;\n                } else {\n                    field.value = newValue;\n                }\n            }\n            return field;\n        });\n        this.cards.trigger();\n    }\n}\n\nexport default KanbanState;\nexport {FieldTypes, CardStates, FieldStates, ColumnStates};","/home/noel/git/dirico/src/components/Card/Card.tsx",["50","51","52","53","54","55"],"/home/noel/git/dirico/src/components/Overview/Overview.tsx",["56"],"import React from 'react';\nimport { OnBehaviorSubjectHook } from '../../Helper';\nimport * as KSS from '../../services/KanbanState.service';\nimport Column from '../Column/Column';\nimport styles from './Overview.module.scss';\n\nconst ks = KSS.default._();\n\nconst Overview: React.FC = () => {\n  const [columns, setColumns] = OnBehaviorSubjectHook<Array<KSS.Column>>(ks.columns, () => ks.columns.getValue());\n\n  return (\n  <div className={styles.Overview}>\n    {columns.sort((ca, cb) => ca.position - cb.position).map(column => {\n      console.log(column, 'column'); \n      return <Column column={column}></Column>;\n    })}\n  </div>\n)};\n\nexport default Overview;\n","/home/noel/git/dirico/src/Helper.tsx",["57","58"],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":5,"column":10,"nodeType":"65","messageId":"66","endLine":5,"endColumn":22},{"ruleId":"63","severity":1,"message":"67","line":18,"column":17,"nodeType":"65","messageId":"66","endLine":18,"endColumn":25},{"ruleId":"63","severity":1,"message":"68","line":19,"column":19,"nodeType":"65","messageId":"66","endLine":19,"endColumn":28},{"ruleId":"63","severity":1,"message":"69","line":6,"column":8,"nodeType":"65","messageId":"66","endLine":6,"endColumn":14},{"ruleId":"63","severity":1,"message":"70","line":1,"column":8,"nodeType":"65","messageId":"66","endLine":1,"endColumn":13},{"ruleId":"71","severity":1,"message":"72","line":83,"column":34,"nodeType":"73","messageId":"74","endLine":83,"endColumn":36},{"ruleId":"63","severity":1,"message":"75","line":18,"column":17,"nodeType":"65","messageId":"66","endLine":18,"endColumn":25},{"ruleId":"63","severity":1,"message":"76","line":19,"column":21,"nodeType":"65","messageId":"66","endLine":19,"endColumn":33},{"ruleId":"63","severity":1,"message":"77","line":20,"column":17,"nodeType":"65","messageId":"66","endLine":20,"endColumn":25},{"ruleId":"63","severity":1,"message":"78","line":21,"column":22,"nodeType":"65","messageId":"66","endLine":21,"endColumn":35},{"ruleId":"63","severity":1,"message":"79","line":22,"column":18,"nodeType":"65","messageId":"66","endLine":22,"endColumn":27},{"ruleId":"80","severity":1,"message":"81","line":79,"column":13,"nodeType":"82","endLine":79,"endColumn":91},{"ruleId":"63","severity":1,"message":"83","line":10,"column":19,"nodeType":"65","messageId":"66","endLine":10,"endColumn":29},{"ruleId":"84","severity":1,"message":"85","line":11,"column":8,"nodeType":"86","endLine":11,"endColumn":10,"suggestions":"87"},{"ruleId":"84","severity":1,"message":"88","line":23,"column":8,"nodeType":"86","endLine":23,"endColumn":10,"suggestions":"89"},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"@typescript-eslint/no-unused-vars","'ColumnStates' is defined but never used.","Identifier","unusedVar","'setCards' is assigned a value but never used.","'setColumn' is assigned a value but never used.","'styles' is defined but never used.","'clone' is defined but never used.","array-callback-return","Array.prototype.filter() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'setTitle' is assigned a value but never used.","'setSubheader' is assigned a value but never used.","'setImage' is assigned a value but never used.","'setParagraphs' is assigned a value but never used.","'setFields' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setColumns' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'behaviorSubject'. Either include it or remove the dependency array.","ArrayExpression",["92"],"React Hook useEffect has missing dependencies: 'behaviorSubject' and 'valReq'. Either include them or remove the dependency array. If 'valReq' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["93"],"no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},"Update the dependencies array to be: [behaviorSubject]",{"range":"98","text":"99"},"Update the dependencies array to be: [behaviorSubject, valReq]",{"range":"100","text":"101"},[443,445],"[behaviorSubject]",[938,940],"[behaviorSubject, valReq]"]